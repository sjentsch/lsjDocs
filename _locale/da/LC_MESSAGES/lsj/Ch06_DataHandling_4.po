# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, Danielle J. Navarro & David R. Foxcroft. This work is
# licensed under a Creative Commons Attribution-Non Commercial 4.0
# International License.
# This file is distributed under the same license as the Learning statistics
# with jamovi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Learning statistics with jamovi \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-18 19:57+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../lsj/Ch06_DataHandling_4.rst:4
msgid "A few more mathematical functions and operations"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:6
msgid ""
"In the previous section, I discussed the ideas behind variable "
"transformations and showed that a lot of the transformations that you "
"might want to apply to your data are based on fairly simple mathematical "
"functions and operations. In this section I want to return to that "
"discussion and mention several other mathematical functions and "
"arithmetic operations that are actually quite useful for a lot of real "
"world data analysis. :numref:`tab-mathfunc` gives a brief overview of the"
" various mathematical functions I want to talk about here, or later.\\ "
"[#]_ Obviously this doesn’t even come close to cataloguing the range of "
"possibilities available, but it does cover a range of functions that are "
"used regularly in data analysis and that are available in jamovi."
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:18
msgid "Some of the mathematical functions available in jamovi"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:21
msgid "Function"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:21
msgid "Example input"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:21
msgid "(answer)"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:23
msgid "Square root"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:23
msgid "``SQRT(x)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:23
msgid "``SQRT(25)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:23
msgid "5"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:25
msgid "Absolute value"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:25
msgid "``ABS(x)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:25
msgid "``ABS(-23)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:25
msgid "23"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:27
msgid "Logarithm (base 10)"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:27
msgid "``LOG10(x)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:27
msgid "``LOG10(1000)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:27
msgid "3"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:30
msgid "Logarithm (base *e*)"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:30
msgid "``LN(x)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:30
msgid "``LN(1000)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:30
msgid "6.908"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:33
msgid "Exponentiation"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:33
msgid "``EXP(x)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:33
msgid "``EXP(6.908)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:33
msgid "1000.245"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:35
msgid "Box-Cox"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:35
msgid "``BOXCOX(x, lamda)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:35
msgid "``BOXCOX(6.908, 3)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:35
msgid "109.551"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:37
msgid "Rounding to nearest"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:37
msgid "``round()``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:37
msgid "``round(1.32)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:37 ../../lsj/Ch06_DataHandling_4.rst:40
msgid "1"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:40
msgid "Rounding down"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:40
msgid "``floor()``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:40
msgid "``floor(1.32)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:42
msgid "Rounding up"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:42
msgid "``ceiling()``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:42
msgid "``ceiling(1.32)``"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:42
msgid "2"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:47
msgid "Logarithms and exponentials"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:49
msgid ""
"As I’ve mentioned earlier, jamovi has an useful range of mathematical "
"functions built into it and there really wouldn’t be much point in trying"
" to describe or even list all of them. For the most part, I’ve focused "
"only on those functions that are strictly necessary for this book. "
"However I do want to make an exception for logarithms and exponentials. "
"Although they aren’t needed anywhere else in this book, they are "
"*everywhere* in statistics more broadly. And not only that, there are a "
"*lot* of situations in which it is convenient to analyse the logarithm of"
" a variable (i.e., to take a “log-transform” of the variable). I suspect "
"that many (maybe most) readers of this book will have encountered "
"logarithms and exponentials before, but from past experience I know that "
"there’s a substantial proportion of students who take a social science "
"statistics class who haven’t touched logarithms since high school, and "
"would appreciate a bit of a refresher."
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:64
msgid ""
"In order to understand logarithms and exponentials, the easiest thing to "
"do is to actually calculate them and see how they relate to other simple "
"calculations. There are three jamovi functions in particular that I want "
"to talk about, namely ``LN()``, ``LOG10()`` and ``EXP()``. To start with,"
" let’s consider ``LOG10()``, which is known as the “logarithm in base "
"10”. The trick to understanding a **logarithm** is to understand that "
"it’s basically the “opposite” of taking a power. Specifically, the "
"logarithm in base 10 is closely related to the powers of 10. So let’s "
"start by noting that 10-cubed is 1000. Mathematically, we would write "
"this:"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:75
msgid "10³ = 1000"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:77
msgid ""
"The trick to understanding a logarithm is to recognise that the statement"
" that “10 to the power of 3 is equal to 1000” is equivalent to the "
"statement that “the logarithm (in base 10) of 1000 is equal to 3”. "
"Mathematically, we write this as follows,"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:82
msgid "log\\ :sub:`10`\\(1000) = 3"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:84
msgid ""
"Okay, since the ``LOG10()`` function is related to the powers of 10, you "
"might expect that there are other logarithms (in bases other than 10) "
"that are related to other powers too. And of course that’s true: there’s "
"not really anything mathematically special about the number 10. You and I"
" happen to find it useful because decimal numbers are built around the "
"number 10, but the big bad world of mathematics scoffs at our decimal "
"numbers. Sadly, the universe doesn’t actually care how we write down "
"numbers. Anyway, the consequence of this cosmic indifference is that "
"there’s nothing particularly special about calculating logarithms in base"
" 10. You could, for instance, calculate your logarithms in base 2. "
"Alternatively, a third type of logarithm, and one we see a lot more of in"
" statistics than either base 10 or base 2, is called the **natural "
"logarithm**, and corresponds to the logarithm in base *e*. Since you "
"might one day run into it, I’d better explain what *e* is. The number "
"*e*, known as **Euler’s number**, is one of those annoying “irrational” "
"numbers whose decimal expansion is infinitely long, and is considered one"
" of the most important numbers in mathematics. The first few digits of "
"*e* are:"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:102
msgid "*e* = 2.718282"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:104
msgid ""
"There are quite a few situation in statistics that require us to "
"calculate powers of *e*, though none of them appear in this book. Raising"
" *e* to the power *x* is called the **exponential** of *x*, and so it’s "
"very common to see e\\ :sup:`x` written as *exp(x)*. And so it’s no "
"surprise that jamovi has a function that calculates exponentials, called "
"``EXP()``. Because the number *e* crops up so often in statistics, the "
"natural logarithm (i.e., logarithm in base *e*) also tends to turn up. "
"Mathematicians often write it as log\\ :sub:`e`\\ (x) or *ln(x)*. In "
"fact, jamovi works the same way: the ``LN()`` function corresponds to the"
" natural logarithm."
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:115
msgid ""
"And with that, I think we’ve had quite enough exponentials and logarithms"
" for this book!"
msgstr ""

#: ../../lsj/Ch06_DataHandling_4.rst:121
msgid "We’ll leave the box-cox function until :ref:`later on <box-cox>`."
msgstr ""

